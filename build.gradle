plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'maven-publish'
    id 'io.quarkus'
    id 'nu.studer.jooq'
    id "com.diffplug.spotless"
}

group = 'org.carl'
version = '1.0-SNAPSHOT'
repositories {
    maven { url 'https://maven.aliyun.com/repository/central' }
    mavenCentral()

}
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
javadoc.options.encoding = 'UTF-8'
dependencies {
//    implementation enforcedPlatform(libs.quarkusPlatform)
//    implementation enforcedPlatform(libs.quarkusCamelPlatform)
    implementation libs.bundles.persistence
    jooqGenerator libs.quarkusJdbcPostgreSQL

    implementation libs.bundles.search

    implementation libs.bundles.protocol

    implementation libs.bundles.mq

    implementation libs.bundles.utils

    implementation libs.bundles.cache

    implementation libs.bundles.base
    testImplementation libs.quarkusJunit5
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
//
//    spotless {
//        // optional: limit format enforcement to just the files changed by this feature branch
//        ratchetFrom 'origin/master'
//
//        java {
//            importOrder()
//            cleanthat()
//            googleJavaFormat("1.23.0").aosp().reflowLongStrings().formatJavadoc(false).reorderImports(false).groupArtifact("com.google.googlejavaformat:google-java-format")
//            formatAnnotations()
//        }
//        groovy {
//            importOrder()
//            removeSemicolons()
//            greclipse()
//            excludeJava()
//        }
//    }
//    afterEvaluate {
//        def spotless = tasks.findByName('spotlessApply')
//        if (spotless) {
//            tasks.withType(JavaCompile) {
//                finalizedBy(spotless)
//            }
//
//            tasks.withType(GroovyCompile) {
//                finalizedBy(spotless)
//            }
//        }
//    }

//tasks.withType(GenerateModuleMetadata).configureEach {
//    // The value 'enforced-platform' is provided in the validation
//    // error message you got
//    suppressedValidationErrors.add('enforced-platform')
//}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/michelleclar/Infrastructure-quarkus")
            credentials {
                username = 'carl'
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

def mySrcDir = 'src/main/java'
def generatedDir = 'src/main/generated'
sourceSets {
    main {
        java {
            srcDir generatedDir
            srcDir mySrcDir
        }
    }
}

idea {
    module {
        generatedSourceDirs.addAll(file(generatedDir))
        sourceDirs.addAll(file(generatedDir))
        sourceDirs.addAll(file(mySrcDir))
    }
}

def envProperties = new Properties()
def envPropertiesFile = file('.env')
if (envPropertiesFile.exists()) {
    envPropertiesFile.withReader('UTF-8') { reader ->
        envProperties.load(reader)
    }
    println "Loaded environment properties from .env"
} else {
    println ".env file not found, skipping loading environment properties."
}

import nu.studer.gradle.jooq.JooqEdition
import org.jooq.meta.jaxb.Logging

jooq {
    version = '3.19.12'
    edition = JooqEdition.OSS

    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            generationTool {
                logging = Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = envProperties.getProperty('jdbcUrl')
                    user = envProperties.getProperty('dbUser')
                    password = envProperties.getProperty('dbPassword')
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
//                        forcedTypes {
//                            forcedType {
//                                name = 'varchar'
//                                includeExpression = '.*'
//                                includeTypes = 'JSONB?'
//                            }
//                            forcedType {
//                                name = 'varchar'
//                                includeExpression = '.*'
//                                includeTypes = 'INET'
//                            }
//                        }
                    }
                    generate {
                        deprecated = false
                        records = true
//                        immutablePojos = true
                        fluentSetters = true
                        pojos = true
                        daos = true
                    }
                    target {
                        packageName = 'org.carl.generated'
                        directory = 'src/main/generated'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}
